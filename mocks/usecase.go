// Code generated by MockGen. DO NOT EDIT.
// Source: ../usecase/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/guntoroyk/soccer-api/entity"
)

// MockTeamUsecaseItf is a mock of TeamUsecaseItf interface.
type MockTeamUsecaseItf struct {
	ctrl     *gomock.Controller
	recorder *MockTeamUsecaseItfMockRecorder
}

// MockTeamUsecaseItfMockRecorder is the mock recorder for MockTeamUsecaseItf.
type MockTeamUsecaseItfMockRecorder struct {
	mock *MockTeamUsecaseItf
}

// NewMockTeamUsecaseItf creates a new mock instance.
func NewMockTeamUsecaseItf(ctrl *gomock.Controller) *MockTeamUsecaseItf {
	mock := &MockTeamUsecaseItf{ctrl: ctrl}
	mock.recorder = &MockTeamUsecaseItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamUsecaseItf) EXPECT() *MockTeamUsecaseItfMockRecorder {
	return m.recorder
}

// AddPlayerToTeam mocks base method.
func (m *MockTeamUsecaseItf) AddPlayerToTeam(teamID int, player *entity.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayerToTeam", teamID, player)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPlayerToTeam indicates an expected call of AddPlayerToTeam.
func (mr *MockTeamUsecaseItfMockRecorder) AddPlayerToTeam(teamID, player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayerToTeam", reflect.TypeOf((*MockTeamUsecaseItf)(nil).AddPlayerToTeam), teamID, player)
}

// CreateTeam mocks base method.
func (m *MockTeamUsecaseItf) CreateTeam(team *entity.Team) (*entity.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", team)
	ret0, _ := ret[0].(*entity.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockTeamUsecaseItfMockRecorder) CreateTeam(team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockTeamUsecaseItf)(nil).CreateTeam), team)
}

// GetPlayer mocks base method.
func (m *MockTeamUsecaseItf) GetPlayer(teamID, playerID int) (*entity.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", teamID, playerID)
	ret0, _ := ret[0].(*entity.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayer indicates an expected call of GetPlayer.
func (mr *MockTeamUsecaseItfMockRecorder) GetPlayer(teamID, playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockTeamUsecaseItf)(nil).GetPlayer), teamID, playerID)
}

// GetTeam mocks base method.
func (m *MockTeamUsecaseItf) GetTeam(id int) (*entity.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", id)
	ret0, _ := ret[0].(*entity.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockTeamUsecaseItfMockRecorder) GetTeam(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockTeamUsecaseItf)(nil).GetTeam), id)
}

// GetTeams mocks base method.
func (m *MockTeamUsecaseItf) GetTeams() ([]*entity.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams")
	ret0, _ := ret[0].([]*entity.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeams indicates an expected call of GetTeams.
func (mr *MockTeamUsecaseItfMockRecorder) GetTeams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*MockTeamUsecaseItf)(nil).GetTeams))
}
